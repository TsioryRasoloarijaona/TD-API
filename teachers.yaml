openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3

paths:
  /teacher:
 
    post:
      tags:
        - teacher
      summary: Add new teacher
      description: Add a new teacher to the list
      operationId: addstudent
      requestBody:
        description: Create a new teacher in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teacher'
          application/xml:
            schema:
              $ref: '#/components/schemas/teacher'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/teacher'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teacher'          
            application/xml:
              schema:
                $ref: '#/components/schemas/teacher'

    
        

    get:
      tags:
        - teacher list
      summary: list of teacher
      description: Multiple status values can be provided with comma separated strings
    
 
           
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/teacher'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/teacher'
  /course:  
    post:
      tags:
        - course
      summary: Add new course
      description: Add a new course to the list
      operationId: addcourse
      requestBody:
        description: Create a new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/course'
          application/xml:
            schema:
              $ref: '#/components/schemas/course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/course'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'          
            application/xml:
              schema:
                $ref: '#/components/schemas/course'      
    
    get:
      tags:
        - course list
      summary: list of course
      description: Multiple status values can be provided with comma separated strings  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/course'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/course'


components:
  schemas:
  
    teacher:
      
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstname:
          type: string
          example: toky
        lastname:
          type: string
          example: Mahery
        
    course:
      type: object
      properties:
        code:
          type: integer
        idteacher:
          type: integer
          description: id of the teacher
        name:
          type: string
        
          
        
      
    